import Foundation

final class WeatherCacheManager {

    enum CacheKey: String {
        case forecast = "cached_forecast"
        case forecastDate = "cached_forecast_date"

        case currentWeather = "cached_current_weather"
        case currentWeatherDate = "cached_current_weather_date"
    }

    /// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –±–µ—Ä–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    private let cacheLifetime: TimeInterval
    private let userDefaults = UserDefaults.standard
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    init() {
        self.cacheLifetime = ConfigurationManager.shared.cacheLifetime
    }

    // MARK: Save

    func save<T: Codable>(_ object: T, for key: CacheKey) {
        let encoder = JSONEncoder()
        if let encoded = try? encoder.encode(object) {
            userDefaults.set(encoded, forKey: key.rawValue)
            userDefaults.set(Date(), forKey: dateKey(for: key))
            print("‚úÖ Saved \(key.rawValue), date: \(Date())")
        } else {
            print("‚ö†Ô∏è Failed to encode object for key: \(key.rawValue)")
        }
    }

    // MARK: Load

    func load<T: Codable>(_ type: T.Type, for key: CacheKey) -> T? {
        guard let data = userDefaults.data(forKey: key.rawValue) else {
            print("‚ÑπÔ∏è No cached data for key: \(key.rawValue)")
            return nil
        }

        guard let date = userDefaults.object(forKey: dateKey(for: key)) as? Date else {
            print("‚ö†Ô∏è No cache date for key: \(key.rawValue), ignoring cache")
            return nil
        }

        if Date().timeIntervalSince(date) > cacheLifetime {
            print("‚ö†Ô∏è Cache expired for key: \(key.rawValue)")
            clearExpiredCache(for: key)
            return nil
        }

        let decoder = JSONDecoder()
        if let decoded = try? decoder.decode(type, from: data) {
            print("‚úÖ Loaded \(key.rawValue) from cache, age: \(Date().timeIntervalSince(date)) sec")
            return decoded
        } else {
            print("‚ö†Ô∏è Failed to decode cached data for key: \(key.rawValue)")
            clearCorruptedCache(for: key)
            return nil
        }
    }

    // MARK: Clear

    func clear(for key: CacheKey) {
        userDefaults.removeObject(forKey: key.rawValue)
        userDefaults.removeObject(forKey: dateKey(for: key))
        print("üóëÔ∏è Cleared cache for key: \(key.rawValue)")
    }

    func clearAll() {
        clear(for: .forecast)
        clear(for: .currentWeather)
    }
    
    /// –û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–µ—à
    private func clearExpiredCache(for key: CacheKey) {
        clear(for: key)
        print("üßπ Cleared expired cache for key: \(key.rawValue)")
    }
    
    /// –û—á–∏—â–∞–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∫–µ—à
    private func clearCorruptedCache(for key: CacheKey) {
        clear(for: key)
        print("üîß Cleared corrupted cache for key: \(key.rawValue)")
    }

    // MARK: Helpers

    private func dateKey(for key: CacheKey) -> String {
        return key.rawValue + "_date"
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    func isCacheValid(for key: CacheKey) -> Bool {
        guard let date = userDefaults.object(forKey: dateKey(for: key)) as? Date else {
            return false
        }
        return Date().timeIntervalSince(date) <= cacheLifetime
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
    func lastUpdateTime(for key: CacheKey) -> Date? {
        return userDefaults.object(forKey: dateKey(for: key)) as? Date
    }
}